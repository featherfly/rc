allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'maven'  
	apply plugin: 'maven-publish'
    apply plugin: 'signing'

	sourceCompatibility = 1.8  
	targetCompatibility = 1.8 

	tasks.withType(JavaCompile) {
	    options.encoding = "UTF-8"
	}
	tasks.withType(Javadoc) {
	    options.encoding = "UTF-8"
	}

	repositories {
    maven {
        url  ant.properties['user.home'] +  "/.m2/repository"
    }
    maven {
        url  "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    mavenCentral()
}

	sourceSets {
	    main
	    test
	}

	dependencies {
        /*
        compile 'cn.featherfly:featherfly-common:1.4.3'
	    compile 'cn.featherfly:featherfly-algorithm:1.0.2'    
	    compile 'cn.featherfly:featherfly-persistence-jdbc:1.3.1'
	    compile 'org.springframework:spring-context:4.3.7.RELEASE'
	    compile 'org.springframework:spring-context-support:4.3.7.RELEASE'
	    compile 'org.javassist:javassist:3.20.0-GA'
	    compile 'org.springframework:spring-test:4.3.7.RELEASE'    
	    */
	    testCompile (
			'org.testng:testng:6.8.21'
			,'org.springframework:spring-test:4.3.7.RELEASE'
			,'dom4j:dom4j:1.6.1'
			,'org.slf4j:slf4j-log4j12:1.6.1'
			,'log4j:log4j:1.2.16'
			,'commons-dbcp:commons-dbcp:1.4'
			,'mysql:mysql-connector-java:5.1.17'
	    )
	}
	
	tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    tasks.withType(Javadoc) {
        options.encoding = "UTF-8"
    }

    task sourcesJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }
    
    task javadocJar(type: Jar, dependsOn:javadoc) { 
         classifier = "javadoc"
         from javadoc.destinationDir 
    }
    
    artifacts {  
        archives jar  
        archives javadocJar  
        archives sourcesJar  
    }  
     
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact (sourcesJar) {
                    classifier "sources"
                }
                artifact (javadocJar) {
                    classifier "javadoc"
                }
            }
        }    
    }

    repositories {
        mavenCentral()
        maven {
            url  ant.properties['user.home'] +  "/.m2/repository"
        }
    }
	//为所有的jar包做数字签名  
	signing {  
	    sign configurations.archives  
	} 
	
	uploadArchives {
       repositories {
           mavenDeployer {  
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) } 
                repository(url:"https://oss.sonatype.org/service/local/staging/deploy/maven2") {  
                    authentication(userName: 'yufei', password: 'yufeimvn101')  
                }
                pom.project {  
                    name project.name  
                    packaging 'jar'
                    description 'common tool'  
                    url 'https://github.com/featherfly/common.git'  
                    scm {  
                        url 'scm:git@github.com:featherfly/common.git'  
                        connection 'scm:git@github.com:featherfly/common.git'  
                        developerConnection 'git@github.com:featherfly/common.git'  
                    }  
                    licenses {  
                        license {  
                            name 'The Apache Software License, Version 2.0'  
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'  
                            distribution 'repo'  
                        }  
                    }  
                    developers {  
                        developer {  
                            id 'featherfly'  
                            name 'Yufei'
                        }  
                    }  
                }  
            }
        }  
    }
    
    task("uploadNexusArchives", type: Upload) {
       configuration = configurations.archives
        uploadDescriptor = true
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url:"http://192.168.203.241:8081/nexus/content/repositories/releases/") {
                    authentication(userName: 'admin', password: 'admin123')
                }
                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'common tool'
                    url 'https://github.com/featherfly/common.git'
                    scm {
                        url 'scm:git@github.com:featherfly/common.git'
                        connection 'scm:git@github.com:featherfly/common.git'
                        developerConnection 'git@github.com:featherfly/common.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'featherfly'
                            name 'zhongji'
                        }
                    }
                }
            }
        }
    } 

	jar {
	    manifest.attributes 'Build-By': "zhong ji"
	    manifest.attributes 'Tool' : "gradle"
	    manifest.attributes 'Build-Jdk' : ant.properties['java.runtime.version']
	    manifest.attributes 'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0'
	    manifest.attributes 'Build-Name': archivesBaseName
	}
}

/*
sourceSets.all { set ->
    def jarTask = task("${set.name}Jar", type: Jar) {
    baseName = baseName + "-$set.name"
    from set.output
    }
    def sourcesTask = task("${set.name}SourcesJar", type: Jar) {
    classifier "sources"
    from set.java.srcDirs
    }
    def javadocTask = task("${set.name}JavadocJar", type: Jar, dependsOn:javadoc) {
    classifier = "javadoc"        
    from javadoc.destinationDir 
    }    
    artifacts {
    archives jarTask
    archives sourcesTask
    archives javadocTask  
    }
    
    publishing {
    publications {
        "${set.name}"(MavenPublication) {
        artifactId archivesBaseName + "-$set.name"                
        artifact jarTask
        artifact (sourcesTask) {
            classifier "sources"
        }
        artifact (javadocTask) {
            classifier "javadoc"
        }
        }
    }        
    }
}
def publishTask = task("publish-All-ToMavenLocal") {   
} << {
    sourceSets.all { set ->
        def name = set.name.replaceFirst(String.valueOf(set.name.charAt(0)), String.valueOf(Character.toUpperCase(set.name.charAt(0))))
        //t.dependsOn(tasks.findByName("publish${name}PublicationToMavenLocal"))
    }
}
*/